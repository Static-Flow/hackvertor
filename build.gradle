apply plugin: 'java'

targetCompatibility = 11
sourceCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.portswigger.burp.extender:burp-extender-api:1.7.22'
    implementation 'commons-codec:commons-codec:1.10'
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'org.unbescape:unbescape:1.1.5.RELEASE'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    implementation 'com.auth0:java-jwt:3.4.0'
    implementation 'org.json:json:20190722'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-compress:1.19'
    implementation 'org.brotli:dec:0.1.2'
    implementation 'org.python:jython-standalone:2.7.0'
    implementation 'bsf:bsf:2.4.0'
    implementation 'org.apache-extras.beanshell:bsh:2.0b6'
    implementation 'org.codehaus.groovy:groovy-all:3.0.7'
    implementation 'com.eclipsesource.j2v8:j2v8_linux_x86_64:4.8.0'
    implementation 'com.eclipsesource.j2v8:j2v8_win32_x86_64:4.6.0'
    implementation 'com.eclipsesource.j2v8:j2v8_macosx_x86_64:4.6.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
}

test {
    useJUnitPlatform()
}
